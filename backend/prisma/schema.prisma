generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users     User[]
  customers Customer[]

  @@map("services")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String    @map("password_hash")
  firstName    String    @map("first_name")
  lastName     String    @map("last_name")
  role         UserRole  @default(EMPLOYEE)
  serviceId    Int?      @map("service_id")
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  preferences  String?
  avatarUrl    String?   @map("avatar_url")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations CORRIGÉES
  service            Service?          @relation(fields: [serviceId], references: [id])
  createdCustomers   Customer[]        @relation("CustomerCreatedBy")
  createdQuotes      Quote[]           @relation("QuoteCreatedBy")
  createdInvoices    Invoice[]         @relation("InvoiceCreatedBy")
  createdPayments    Payment[]         @relation("PaymentCreatedBy")
  serviceApprovals   Quote[]           @relation("ServiceManagerApproval")
  dgApprovals        Quote[]           @relation("DGApproval")
  auditLogs          AuditLog[]
  quoteApprovals     QuoteApproval[]
  createdExpenses    Expense[]         @relation("ExpenseCreatedBy")
  accountingEntries  AccountingEntry[]
  cashFlowEntries    CashFlow[]
  createdReminders   Reminder[]        @relation("ReminderCreatedBy")
  createdRecurringInvoices RecurringInvoice[] @relation("RecurringInvoiceCreatedBy")

  @@map("users")
}

model Customer {
  id               Int            @id @default(autoincrement())
  customerNumber   String         @unique @map("customer_number")
  type             CustomerType   @default(COMPANY)
  name             String
  legalName        String?        @map("legal_name")
  siret            String?
  vatNumber        String?        @map("vat_number")
  email            String?
  phone            String?
  mobile           String?
  website          String?
  paymentTerms     Int            @default(30) @map("payment_terms")
  paymentMethod    PaymentMethod  @default(TRANSFER) @map("payment_method")
  creditLimit      Float          @default(0) @map("credit_limit")
  discountRate     Float          @default(0) @map("discount_rate")
  category         String?
  tags             String?
  notes            String?
  isActive         Boolean        @default(true) @map("is_active")
  serviceId        Int?           @map("service_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  createdBy        Int            @map("created_by")

  // Relations CORRIGÉES
  service           Service?       @relation(fields: [serviceId], references: [id])
  creator           User           @relation("CustomerCreatedBy", fields: [createdBy], references: [id])
  addresses         CustomerAddress[]
  quotes            Quote[]
  invoices          Invoice[]
  payments          Payment[]
  recurringInvoices RecurringInvoice[]

  @@map("customers")
}

model CustomerAddress {
  id           Int         @id @default(autoincrement())
  customerId   Int         @map("customer_id")
  type         AddressType
  name         String?
  addressLine1 String      @map("address_line1")
  addressLine2 String?     @map("address_line2")
  postalCode   String      @map("postal_code")
  city         String
  country      String      @default("France")
  isDefault    Boolean     @default(false) @map("is_default")
  createdAt    DateTime    @default(now()) @map("created_at")

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  quotes   Quote[]
  invoices Invoice[]

  @@map("customer_addresses")
}

model Product {
  id                  Int          @id @default(autoincrement())
  sku                 String       @unique
  name                String
  description         String?
  type                ProductType  @default(PRODUCT)
  category            String?
  unit                String       @default("pièce")
  priceHt             Float        @map("price_ht")
  vatRate             Float        @default(20.00) @map("vat_rate")
  costPrice           Float?       @map("cost_price")
  stockQuantity       Int          @default(0) @map("stock_quantity")
  stockAlertThreshold Int          @default(0) @map("stock_alert_threshold")
  isActive            Boolean      @default(true) @map("is_active")
  weight              Float?
  dimensions          String?
  imageUrl            String?      @map("image_url")
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @updatedAt @map("updated_at")

  prices                ProductPrice[]
  quoteItems            QuoteItem[]
  invoiceItems          InvoiceItem[]
  recurringInvoiceItems RecurringInvoiceItem[]

  @@map("products")
}

model ProductPrice {
  id               Int       @id @default(autoincrement())
  productId        Int       @map("product_id")
  customerCategory String?   @map("customer_category")
  minQuantity      Int       @default(1) @map("min_quantity")
  priceHt          Float     @map("price_ht")
  validFrom        DateTime? @map("valid_from")
  validUntil       DateTime? @map("valid_until")
  createdAt        DateTime  @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_prices")
}

model Quote {
  id                            Int         @id @default(autoincrement())
  quoteNumber                   String      @unique @map("quote_number")
  customerId                    Int         @map("customer_id")
  customerAddressId             Int?        @map("customer_address_id")
  status                        QuoteStatus @default(DRAFT)
  quoteDate                     DateTime    @map("quote_date")
  validUntil                    DateTime    @map("valid_until")
  subtotalHt                    Float       @default(0) @map("subtotal_ht")
  discountAmount                Float       @default(0) @map("discount_amount")
  totalVat                      Float       @default(0) @map("total_vat")
  totalTtc                      Float       @default(0) @map("total_ttc")
  terms                         String?
  notes                         String?
  createdBy                     Int         @map("created_by")
  createdAt                     DateTime    @default(now()) @map("created_at")
  updatedAt                     DateTime    @updatedAt @map("updated_at")
  sentAt                        DateTime?   @map("sent_at")
  submittedForServiceApprovalAt DateTime?   @map("submitted_for_service_approval_at")
  serviceManagerApprovedBy      Int?        @map("service_manager_approved_by")
  serviceManagerApprovalDate    DateTime?   @map("service_manager_approval_date")
  serviceManagerComments        String?     @map("service_manager_comments")
  dgApprovedBy                  Int?        @map("dg_approved_by")
  dgApprovalDate                DateTime?   @map("dg_approval_date")
  dgComments                    String?     @map("dg_comments")
  acceptedAt                    DateTime?   @map("accepted_at")

  customer        Customer         @relation(fields: [customerId], references: [id])
  customerAddress CustomerAddress? @relation(fields: [customerAddressId], references: [id])
  creator         User             @relation("QuoteCreatedBy", fields: [createdBy], references: [id])
  serviceManager  User?            @relation("ServiceManagerApproval", fields: [serviceManagerApprovedBy], references: [id])
  dgApprover      User?            @relation("DGApproval", fields: [dgApprovedBy], references: [id])
  items           QuoteItem[]
  invoices        Invoice[]
  approvals       QuoteApproval[]

  @@map("quotes")
}

model QuoteItem {
  id           Int     @id @default(autoincrement())
  quoteId      Int     @map("quote_id")
  productId    Int?    @map("product_id")
  description  String
  quantity     Float
  unitPriceHt  Float   @map("unit_price_ht")
  discountRate Float   @default(0) @map("discount_rate")
  vatRate      Float   @map("vat_rate")
  totalHt      Float   @map("total_ht")
  sortOrder    Int     @default(0) @map("sort_order")

  quote   Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("quote_items")
}

model QuoteApproval {
  id            Int            @id @default(autoincrement())
  quoteId       Int            @map("quote_id")
  approverId    Int            @map("approver_id")
  approvalLevel ApprovalLevel  @map("approval_level")
  status        ApprovalStatus @default(PENDING)
  approvalDate  DateTime?      @map("approval_date")
  comments      String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  quote    Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  approver User  @relation(fields: [approverId], references: [id])

  @@unique([quoteId, approvalLevel])
  @@map("quote_approvals")
}

model Invoice {
  id                Int           @id @default(autoincrement())
  invoiceNumber     String        @unique @map("invoice_number")
  customerId        Int           @map("customer_id")
  customerAddressId Int?          @map("customer_address_id")
  quoteId           Int?          @map("quote_id")
  type              InvoiceType   @default(INVOICE)
  status            InvoiceStatus @default(DRAFT)
  invoiceDate       DateTime      @map("invoice_date")
  dueDate           DateTime      @map("due_date")
  subtotalHt        Float         @default(0) @map("subtotal_ht")
  discountAmount    Float         @default(0) @map("discount_amount")
  totalVat          Float         @default(0) @map("total_vat")
  totalTtc          Float         @default(0) @map("total_ttc")
  paidAmount        Float         @default(0) @map("paid_amount")
  balanceDue        Float         @default(0) @map("balance_due")
  paymentTerms      Int           @default(30) @map("payment_terms")
  lateFeeRate       Float         @default(0) @map("late_fee_rate")
  terms             String?
  notes             String?
  createdBy         Int           @map("created_by")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  sentAt            DateTime?     @map("sent_at")

  customer         Customer         @relation(fields: [customerId], references: [id])
  customerAddress  CustomerAddress? @relation(fields: [customerAddressId], references: [id])
  quote            Quote?           @relation(fields: [quoteId], references: [id])
  creator          User             @relation("InvoiceCreatedBy", fields: [createdBy], references: [id])
  items            InvoiceItem[]
  paymentAllocations PaymentAllocation[]
  reminders        Reminder[]

  @@map("invoices")
}

model InvoiceItem {
  id           Int     @id @default(autoincrement())
  invoiceId    Int     @map("invoice_id")
  productId    Int?    @map("product_id")
  description  String
  quantity     Float
  unitPriceHt  Float   @map("unit_price_ht")
  discountRate Float   @default(0) @map("discount_rate")
  vatRate      Float   @map("vat_rate")
  totalHt      Float   @map("total_ht")
  sortOrder    Int     @default(0) @map("sort_order")

  invoice Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("invoice_items")
}

model Payment {
  id            Int           @id @default(autoincrement())
  paymentNumber String        @unique @map("payment_number")
  customerId    Int           @map("customer_id")
  amount        Float
  paymentDate   DateTime      @map("payment_date")
  paymentMethod PaymentMethod @map("payment_method")
  reference     String?
  notes         String?
  createdBy     Int           @map("created_by")
  createdAt     DateTime      @default(now()) @map("created_at")

  customer    Customer            @relation(fields: [customerId], references: [id])
  creator     User                @relation("PaymentCreatedBy", fields: [createdBy], references: [id])
  allocations PaymentAllocation[]

  @@map("payments")
}

model PaymentAllocation {
  id        Int      @id @default(autoincrement())
  paymentId Int      @map("payment_id")
  invoiceId Int      @map("invoice_id")
  amount    Float
  createdAt DateTime @default(now()) @map("created_at")

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payment_allocations")
}

model RecurringInvoice {
  id              Int                  @id @default(autoincrement())
  customerId      Int                  @map("customer_id")
  templateName    String               @map("template_name")
  frequency       RecurringFrequency
  startDate       DateTime             @map("start_date")
  endDate         DateTime?            @map("end_date")
  nextInvoiceDate DateTime             @map("next_invoice_date")
  isActive        Boolean              @default(true) @map("is_active")
  subtotalHt      Float                @default(0) @map("subtotal_ht")
  totalVat        Float                @default(0) @map("total_vat")
  totalTtc        Float                @default(0) @map("total_ttc")
  terms           String?
  notes           String?
  createdBy       Int                  @map("created_by")
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")

  customer Customer                @relation(fields: [customerId], references: [id])
  creator  User                    @relation("RecurringInvoiceCreatedBy", fields: [createdBy], references: [id])
  items    RecurringInvoiceItem[]

  @@map("recurring_invoices")
}

model RecurringInvoiceItem {
  id                 Int     @id @default(autoincrement())
  recurringInvoiceId Int     @map("recurring_invoice_id")
  productId          Int?    @map("product_id")
  description        String
  quantity           Float
  unitPriceHt        Float   @map("unit_price_ht")
  vatRate            Float   @map("vat_rate")
  totalHt            Float   @map("total_ht")
  sortOrder          Int     @default(0) @map("sort_order")

  recurringInvoice RecurringInvoice @relation(fields: [recurringInvoiceId], references: [id], onDelete: Cascade)
  product          Product?         @relation(fields: [productId], references: [id])

  @@map("recurring_invoice_items")
}

model Reminder {
  id           Int            @id @default(autoincrement())
  invoiceId    Int            @map("invoice_id")
  type         ReminderType
  sentDate     DateTime       @map("sent_date")
  dueDate      DateTime?      @map("due_date")
  amountDue    Float          @map("amount_due")
  lateFees     Float          @default(0) @map("late_fees")
  status       ReminderStatus @default(SENT)
  emailSubject String?        @map("email_subject")
  emailBody    String?        @map("email_body")
  createdBy    Int            @map("created_by")
  createdAt    DateTime       @default(now()) @map("created_at")

  invoice Invoice @relation(fields: [invoiceId], references: [id])
  creator User    @relation("ReminderCreatedBy", fields: [createdBy], references: [id])

  @@map("reminders")
}

model Document {
  id          Int          @id @default(autoincrement())
  type        DocumentType
  referenceId Int          @map("reference_id")
  filename    String
  filePath    String       @map("file_path")
  fileSize    Int?         @map("file_size")
  mimeType    String?      @map("mime_type")
  generatedAt DateTime     @default(now()) @map("generated_at")

  @@map("documents")
}

model Expense {
  id            Int           @id @default(autoincrement())
  expenseNumber String        @unique @map("expense_number")
  supplierId    Int?          @map("supplier_id")
  category      String
  description   String?
  amountHt      Float         @map("amount_ht")
  vatAmount     Float         @default(0) @map("vat_amount")
  totalTtc      Float         @map("total_ttc")
  expenseDate   DateTime      @map("expense_date")
  paymentDate   DateTime?     @map("payment_date")
  paymentMethod PaymentMethod @default(CARD) @map("payment_method")
  status        ExpenseStatus @default(PENDING)
  receiptUrl    String?       @map("receipt_url")
  notes         String?
  createdBy     Int           @map("created_by")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  supplier Supplier? @relation(fields: [supplierId], references: [id])
  creator  User      @relation("ExpenseCreatedBy", fields: [createdBy], references: [id])

  @@map("expenses")
}

model Supplier {
  id            Int      @id @default(autoincrement())
  name          String
  contactPerson String?  @map("contact_person")
  email         String?
  phone         String?
  addressLine1  String?  @map("address_line1")
  city          String?
  postalCode    String?  @map("postal_code")
  country       String?
  vatNumber     String?  @map("vat_number")
  bankName      String?  @map("bank_name")
  bankIban      String?  @map("bank_iban")
  bankBic       String?  @map("bank_bic")
  paymentTerms  Int      @default(30) @map("payment_terms")
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  expenses Expense[]

  @@map("suppliers")
}

model AccountingEntry {
  id                 Int                @id @default(autoincrement())
  entryDate          DateTime           @map("entry_date")
  accountNumber      String             @map("account_number")
  debit              Float              @default(0)
  credit             Float              @default(0)
  description        String?
  sourceDocumentType SourceDocumentType @map("source_document_type")
  sourceDocumentId   Int                @map("source_document_id")
  createdBy          Int                @map("created_by")
  createdAt          DateTime           @default(now()) @map("created_at")

  creator User @relation(fields: [createdBy], references: [id])

  @@map("accounting_entries")
}

model CashFlow {
  id                 Int                @id @default(autoincrement())
  transactionDate    DateTime           @map("transaction_date")
  type               CashFlowType
  amount             Float
  description        String?
  category           String?
  sourceDocumentType SourceDocumentType @map("source_document_type")
  sourceDocumentId   Int                @map("source_document_id")
  createdBy          Int                @map("created_by")
  createdAt          DateTime           @default(now()) @map("created_at")

  creator User @relation(fields: [createdBy], references: [id])

  @@map("cash_flow")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  action    String
  details   String?
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  GENERAL_DIRECTOR
  SERVICE_MANAGER
  EMPLOYEE
  ACCOUNTANT
}

enum CustomerType {
  INDIVIDUAL
  COMPANY
}

enum AddressType {
  BILLING
  SHIPPING
  OTHER
}

enum ProductType {
  PRODUCT
  SERVICE
  SUBSCRIPTION
}

enum PaymentMethod {
  TRANSFER
  CHECK
  CARD
  CASH
  OTHER
}

enum QuoteStatus {
  DRAFT
  SUBMITTED_FOR_SERVICE_APPROVAL
  APPROVED_BY_SERVICE_MANAGER
  REJECTED_BY_SERVICE_MANAGER
  SUBMITTED_FOR_DG_APPROVAL
  APPROVED_BY_DG
  REJECTED_BY_DG
  ACCEPTED_BY_CLIENT
  REJECTED_BY_CLIENT
  EXPIRED
}

enum ApprovalLevel {
  SERVICE_MANAGER
  GENERAL_DIRECTOR
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InvoiceType {
  INVOICE
  CREDIT_NOTE
  PROFORMA
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}

enum RecurringFrequency {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ReminderType {
  FRIENDLY
  FORMAL
  FINAL
  LEGAL
}

enum ReminderStatus {
  SENT
  READ
  PAID
  IGNORED
}

enum DocumentType {
  QUOTE
  INVOICE
  CREDIT_NOTE
  REMinder
  REPORT
}

enum ExpenseStatus {
  PENDING
  PAID
  REIMBURSED
}

enum SourceDocumentType {
  INVOICE
  QUOTE
  PAYMENT
  EXPENSE
  SALARY
  OTHER
}

enum CashFlowType {
  INFLOW
  OUTFLOW
}