// backend/prisma/seed.ts
/* eslint-disable no-console */
import { PrismaClient, UserRole } from '@prisma/client';

const prisma = new PrismaClient();

async function upsertPermission(name: string, description: string) {
  // Adapter les champs selon ton mod√®le Permission
  // Hypoth√®se: Permission { id, name (unique), description? }
  return prisma.permission.upsert({
    where: { name },
    update: { description },
    create: { name, description },
  });
}

async function upsertRolePermission(role: UserRole, permissionId: number, flags?: Partial<{
  canView: boolean; canCreate: boolean; canEdit: boolean; canDelete: boolean; canApprove: boolean;
}>) {
  // Adapter selon ton sch√©ma; Hypoth√®se: unique (role, permissionId)
  const defaults = { canView: true, canCreate: false, canEdit: false, canDelete: false, canApprove: false };
  const data = { ...defaults, ...(flags || {}) };

  // Si ton mod√®le s'appelle RolePermission et poss√®de un unique composite (role, permissionId)
  return prisma.rolePermission.upsert({
    where: {
      // Remplace par ta contrainte unique exacte si diff√©rente:
      role_permission_unique: { role, permissionId } as any,
    },
    update: data,
    create: { role, permissionId, ...data },
  });
}

async function main() {
  console.log('üîß Seeding permissions...');

  // 1) Upsert des nouvelles permissions
  const pCalendarManage = await upsertPermission(
    'calendar.manage',
    'G√©rer la configuration du calendrier'
  );

  const pInterventionsSchedule = await upsertPermission(
    'interventions.schedule',
    'Planifier les interventions (assignation / programmation)'
  );

  console.log('‚úÖ Permissions upserted:', {
    calendarManage: pCalendarManage.id,
    interventionsSchedule: pInterventionsSchedule.id,
  });

  // 2) Mapping aux r√¥les (optionnel) ‚Äî adapte selon ta politique
  console.log('üîó Mapping role ‚Üí permissions...');

  // ADMIN: tout (ici on met view+create+edit+delete+approve)
  await upsertRolePermission(UserRole.ADMIN, pCalendarManage.id, {
    canView: true, canCreate: true, canEdit: true, canDelete: true, canApprove: true
  });
  await upsertRolePermission(UserRole.ADMIN, pInterventionsSchedule.id, {
    canView: true, canCreate: true, canEdit: true, canDelete: true, canApprove: true
  });

  // SERVICE_MANAGER: peut planifier les interventions; pas forc√©ment g√©rer la config calendrier
  await upsertRolePermission(UserRole.SERVICE_MANAGER, pInterventionsSchedule.id, {
    canView: true, canCreate: true, canEdit: true
  });

  // EMPLOYEE: g√©n√©ralement pas de schedule, ni manage calendrier ‚Äî on ne mappe pas.
  // Si tu veux qu‚Äôil voie un √©cran d‚Äôinfos sans action, tu peux mettre { canView: true }.

  console.log('üéâ Seed termin√©.');
}

main()
  .catch((e) => {
    console.error('‚ùå Seed error:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
