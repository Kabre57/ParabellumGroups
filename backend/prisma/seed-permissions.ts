// AUTO-GENERATED (no Role model).
// Place as Backend/prisma/seed-permissions.ts and run with: npx ts-node prisma/seed-permissions.ts
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

const permissions = [
  "account.create",
  "account.delete",
  "account.update",
  "accountService.create",
  "accountService.delete",
  "accountService.update",
  "accountingEntry.create",
  "accounts.create",
  "accounts.delete",
  "accounts.read",
  "accounts.update",
  "api.delete",
  "auditLog.create",
  "axios.create",
  "calendar.create",
  "calendar.delete",
  "calendar.manage",
  "calendar.read",
  "calendar.update",
  "calendarEvent.create",
  "calendarEvent.delete",
  "calendarEvent.update",
  "calendarService.create",
  "cashFlow.create",
  "cashFlowService.create",
  "cashFlowService.delete",
  "clientProject.create",
  "clientProject.delete",
  "clientProject.update",
  "commercial.analytics",
  "commercial.reports",
  "comptes.create",
  "comptes.delete",
  "comptes.read",
  "comptes.update",
  "config.validate",
  "contract.create",
  "contract.update",
  "contractService.create",
  "contractService.delete",
  "contractService.update",
  "contracts.create",
  "contracts.delete",
  "contracts.read",
  "contracts.update",
  "customer.create",
  "customer.delete",
  "customer.update",
  "customerService.create",
  "customerService.update",
  "customers.create",
  "customers.delete",
  "customers.read",
  "customers.update",
  "dashboard.analytics",
  "dashboard.read",
  "dashboard.reports",
  "ecritures.create",
  "ecritures.delete",
  "ecritures.read",
  "ecritures.update",
  "employee.create",
  "employee.delete",
  "employee.update",
  "employeeService.create",
  "employeeService.delete",
  "employeeService.update",
  "employees.create",
  "employees.delete",
  "employees.read",
  "employees.update",
  "entreeMateriel.create",
  "entries.read",
  "events.create",
  "events.read",
  "expense.create",
  "expense.delete",
  "expense.update",
  "expenseService.create",
  "expenseService.delete",
  "expenseService.update",
  "expenses.approve",
  "expenses.create",
  "expenses.delete",
  "expenses.read",
  "expenses.update",
  "flows.create",
  "flows.delete",
  "flows.read",
  "intervention.create",
  "intervention.delete",
  "intervention.update",
  "interventionService.create",
  "interventionService.delete",
  "interventionService.update",
  "interventions.create",
  "interventions.delete",
  "interventions.read",
  "interventions.update",
  "interventions.validate",
  "inventory.read",
  "invoice.create",
  "invoice.update",
  "invoiceService.create",
  "invoices.create",
  "invoices.delete",
  "invoices.read",
  "invoices.update",
  "leaveRequest.create",
  "leaveRequest.update",
  "leaveService.create",
  "leaveService.update",
  "leaves.approve",
  "leaves.create",
  "leaves.delete",
  "leaves.read",
  "leaves.update",
  "loan.create",
  "loan.delete",
  "loan.update",
  "loanPayment.create",
  "loanService.create",
  "loanService.delete",
  "loans.approve",
  "loans.create",
  "loans.delete",
  "loans.read",
  "loans.update",
  "marketing.read",
  "materiel.create",
  "materiel.delete",
  "materiel.update",
  "materielService.create",
  "materielService.delete",
  "materiels.create",
  "materiels.delete",
  "materiels.read",
  "materiels.update",
  "message.create",
  "message.update",
  "messageService.create",
  "messages.create",
  "messages.delete",
  "messages.manage",
  "messages.read",
  "messages.update",
  "mission.create",
  "mission.delete",
  "mission.update",
  "missionService.create",
  "missionService.delete",
  "missionService.update",
  "missions.assign",
  "missions.create",
  "missions.delete",
  "missions.read",
  "missions.update",
  "notification.create",
  "notification.delete",
  "notification.update",
  "object.assign",
  "opportunities.create",
  "payment.create",
  "paymentService.create",
  "paymentService.delete",
  "payments.create",
  "payments.delete",
  "payments.read",
  "payments.update",
  "performance.create",
  "performance.delete",
  "performance.read",
  "performance.update",
  "performanceReview.create",
  "performanceReview.delete",
  "performanceReview.update",
  "performanceService.create",
  "permission.create",
  "permission.delete",
  "permission.update",
  "pipeline.read",
  "pipeline.update",
  "product.create",
  "product.delete",
  "product.update",
  "productService.create",
  "productService.delete",
  "productService.update",
  "products.create",
  "products.delete",
  "products.read",
  "products.update",
  "projectService.create",
  "projectService.delete",
  "projectService.update",
  "projects.create",
  "projects.delete",
  "projects.manage",
  "projects.read",
  "projects.update",
  "prospect.create",
  "prospect.delete",
  "prospect.update",
  "prospectActivity.create",
  "prospectService.create",
  "prospects.assign",
  "prospects.create",
  "prospects.delete",
  "prospects.export",
  "prospects.read",
  "prospects.update",
  "prospects.validate",
  "purchaseOrder.create",
  "purchaseOrder.delete",
  "purchaseOrder.update",
  "purchaseOrderItem.update",
  "purchaseReceipt.create",
  "purchaseService.create",
  "purchaseService.delete",
  "purchaseService.update",
  "purchases.approve",
  "purchases.create",
  "purchases.delete",
  "purchases.read",
  "purchases.update",
  "quote.create",
  "quote.update",
  "quoteApproval.create",
  "quoteApproval.update",
  "quoteService.create",
  "quoteService.update",
  "quotes.create",
  "quotes.delete",
  "quotes.export",
  "quotes.read",
  "quotes.update",
  "rapportImage.create",
  "rapportImage.delete",
  "rapportMission.create",
  "rapportMission.delete",
  "rapportMission.update",
  "rapportService.create",
  "rapports.create",
  "rapports.delete",
  "rapports.read",
  "rapports.update",
  "rapports.validate",
  "recurring.create",
  "recurring.delete",
  "recurring.read",
  "recurring.update",
  "recurringInvoice.create",
  "recurringInvoiceService.create",
  "reminder.create",
  "reminder.update",
  "reminders.create",
  "reminders.delete",
  "reminders.read",
  "reminders.update",
  "reports.export",
  "router.delete",
  "salaries.create",
  "salaries.delete",
  "salaries.read",
  "salaries.reports",
  "salaries.update",
  "salary.create",
  "salary.delete",
  "salary.update",
  "salaryService.create",
  "salaryService.delete",
  "service.create",
  "service.delete",
  "service.update",
  "serviceService.create",
  "serviceService.delete",
  "serviceService.update",
  "services.create",
  "services.delete",
  "services.read",
  "services.update",
  "sortieMateriel.create",
  "specialite.create",
  "specialite.delete",
  "specialite.update",
  "specialiteService.create",
  "specialiteService.delete",
  "specialites.create",
  "specialites.delete",
  "specialites.read",
  "specialites.update",
  "stages.manage",
  "supplier.create",
  "supplier.delete",
  "supplier.update",
  "supplierService.create",
  "supplierService.delete",
  "supplierService.update",
  "suppliers.create",
  "suppliers.delete",
  "suppliers.read",
  "suppliers.update",
  "technicien.create",
  "technicien.update",
  "technicienIntervention.create",
  "technicienIntervention.delete",
  "technicienIntervention.update",
  "technicienService.create",
  "technicienService.delete",
  "technicienService.update",
  "techniciens.create",
  "techniciens.delete",
  "techniciens.read",
  "techniciens.update",
  "timeOffRequest.create",
  "timeOffRequest.update",
  "timeoff.create",
  "timeoff.read",
  "tresorerie.create",
  "tresorerie.delete",
  "tresorerie.read",
  "tresorerie.update",
  "user.create",
  "user.delete",
  "user.update",
  "userCalendar.create",
  "userService.create",
  "userService.delete",
  "userService.update",
  "users.create",
  "users.delete",
  "users.read",
  "users.update"
] as const;

async function main() {
  for (const name of permissions) {
    await prisma.permission.upsert({
      where: { name },
      create: { name, category: name.split('.')[0] },
      update: { category: name.split('.')[0] },
    });
  }
  console.log(`Upserted ${permissions.length} permissions.`);
}

main().then(()=> prisma.$disconnect()).catch(async (e) => {
  console.error(e);
  await prisma.$disconnect();
  process.exit(1);
});
